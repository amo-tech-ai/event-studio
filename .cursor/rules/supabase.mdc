---
description: Supabase connection patterns, API keys, and database access methods
alwaysApply: true
---

# Supabase Connection & Authentication Rules

## üîë API Keys & Environment Variables

### Safe for Frontend (‚úÖ Public Use)

**VITE_SUPABASE_URL**
- **What**: Base URL of your Supabase project
- **Use**: Initialize Supabase client in browser/mobile apps
- **Example**:
  ```typescript
  const supabase = createClient(
    import.meta.env.VITE_SUPABASE_URL,
    import.meta.env.VITE_SUPABASE_ANON_KEY
  )
  ```

**VITE_SUPABASE_ANON_KEY (Publishable Key)**
- **What**: Public "anon" API key for client-side access
- **Protection**: Row-Level Security (RLS) enforces access control
- **Use**: All frontend database operations (CRUD, auth, storage)
- **Example**:
  ```typescript
  // User signup/login
  const { data, error } = await supabase.auth.signUp({
    email: 'user@example.com',
    password: 'password'
  })
  
  // Query with RLS protection
  const { data: events } = await supabase
    .from('events')
    .select('*')
  ```

### Backend/CLI Only (‚ùå NEVER Expose in Frontend)

**SUPABASE_SERVICE_ROLE_KEY**
- **What**: Admin key that bypasses RLS
- **Use**: Backend services, admin operations, server-side scripts
- **Security**: NEVER expose in browser or Git repos
- **Example**:
  ```typescript
  // Backend API only
  const supabaseAdmin = createClient(
    process.env.VITE_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!, // Server-side only!
    { auth: { persistSession: false } }
  )
  
  // Bypass RLS for admin operations
  const { data } = await supabaseAdmin
    .from('orders')
    .select('*, profiles(*)')
  ```

**SUPABASE_PERSONAL_ACCESS_TOKEN**
- **What**: CLI authentication token for your Supabase account
- **Use**: Supabase CLI commands (migrations, deployments)
- **Example**:
  ```bash
  export SUPABASE_ACCESS_TOKEN="sbp_xxxxx"
  npx supabase link --project-ref asrzdtpyrdgyggqdfwwl
  npx supabase db push
  npx supabase secrets set MY_SECRET=value
  ```

## üîå Database Connection Methods

### When to Use Each Connection Type

**1. Supabase Client (Frontend) ‚úÖ RECOMMENDED**
```typescript
// ‚úÖ DO: Use Supabase JS client for all frontend operations
import { supabase } from '@/integrations/supabase/client'

const { data } = await supabase
  .from('events')
  .select('*, venues(*)')
  .eq('status', 'published')
```
- **Use**: All browser/mobile app operations
- **Benefits**: Auto-handles auth, RLS, realtime subscriptions
- **Never**: Use direct SQL connections in frontend

**2. Direct Connection (IPv6 Required)**
```bash
SUPABASE_DB_URL_DIRECT=postgresql://postgres:PASSWORD@db.PROJECT-REF.supabase.co:5432/postgres
```
- **Use**: Database migrations, local development, admin tasks
- **Port**: 5432
- **Limitations**: Requires IPv6 support
- **Example**:
  ```bash
  # Local migrations
  psql "$SUPABASE_DB_URL_DIRECT" < migration.sql
  
  # CLI commands
  npx supabase db reset
  ```

**3. Session Pooler (Persistent Backends)**
```bash
SUPABASE_DB_URL_SESSION=postgresql://postgres.PROJECT-REF:PASSWORD@aws-0-REGION.pooler.supabase.com:5432/postgres
```
- **Use**: Long-running backend services, persistent APIs
- **Port**: 5432
- **Benefits**: IPv4/IPv6 support, prepared statements work
- **Example**:
  ```typescript
  // Backend API server
  import { Pool } from 'pg'
  const pool = new Pool({ connectionString: process.env.SUPABASE_DB_URL_SESSION })
  ```

**4. Transaction Pooler (Serverless) ‚ö° FOR EDGE/SERVERLESS**
```bash
SUPABASE_DB_URL_TRANSACTION=postgresql://postgres.PROJECT-REF:PASSWORD@aws-0-REGION.pooler.supabase.com:6543/postgres
```
- **Use**: Serverless functions, Edge functions, auto-scaling apps
- **Port**: 6543
- **Limitations**: ‚ö†Ô∏è NO prepared statements (disable in client)
- **Example**:
  ```typescript
  // Vercel/Netlify Edge Function
  import postgres from 'postgres'
  const sql = postgres(process.env.SUPABASE_DB_URL_TRANSACTION!, {
    prepare: false // ‚ö†Ô∏è CRITICAL: Disable prepared statements
  })
  
  const events = await sql`SELECT * FROM events WHERE status = 'published'`
  ```

### Local Development
```bash
# Use these for local Supabase (npx supabase start)
VITE_SUPABASE_URL=http://127.0.0.1:54321
VITE_SUPABASE_ANON_KEY=<from_npx_supabase_status>
SUPABASE_DB_URL_LOCAL=postgresql://postgres:postgres@127.0.0.1:54322/postgres
```

## üìã Connection Decision Matrix

| Environment | Use Case | Connection Method | Key Type |
|-------------|----------|-------------------|----------|
| Frontend (React/Vue) | All app operations | Supabase Client | ANON_KEY |
| Backend API (persistent) | Server-side logic | Session Pooler | SERVICE_ROLE_KEY |
| Serverless/Edge | Lambda, Vercel, Netlify | Transaction Pooler | SERVICE_ROLE_KEY |
| Database Migrations | Schema changes | Direct Connection | N/A (postgres user) |
| CLI Operations | Deploy, secrets | CLI commands | PERSONAL_ACCESS_TOKEN |
| Local Development | Testing | Supabase Client | Local ANON_KEY |

## üîí Security Best Practices

### DO ‚úÖ
```typescript
// ‚úÖ Frontend: Use client with anon key
const supabase = createClient(
  import.meta.env.VITE_SUPABASE_URL,
  import.meta.env.VITE_SUPABASE_ANON_KEY
)

// ‚úÖ Backend: Use service role key server-side only
const supabaseAdmin = createClient(
  process.env.VITE_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  { auth: { persistSession: false } }
)

// ‚úÖ Serverless: Disable prepared statements
const sql = postgres(process.env.SUPABASE_DB_URL_TRANSACTION!, {
  prepare: false
})
```

### DON'T ‚ùå
```typescript
// ‚ùå NEVER: Expose service role key in frontend
const supabase = createClient(
  import.meta.env.VITE_SUPABASE_URL,
  import.meta.env.SUPABASE_SERVICE_ROLE_KEY // üî¥ DANGEROUS!
)

// ‚ùå NEVER: Use direct SQL in frontend
import postgres from 'postgres'
const sql = postgres(dbUrl) // üî¥ Security risk!

// ‚ùå NEVER: Commit keys to Git
SUPABASE_SERVICE_ROLE_KEY=eyJhbG... // üî¥ Use .env and .gitignore

// ‚ùå NEVER: Use transaction pooler with prepared statements
const { Client } = require('pg')
const client = new Client({
  connectionString: SUPABASE_DB_URL_TRANSACTION,
  // üî¥ Will fail without prepare: false
})
```

## üéØ Common Use Cases

### Use Case 1: User Authentication (Frontend)
```typescript
import { supabase } from '@/integrations/supabase/client'

// Sign up
const { data, error } = await supabase.auth.signUp({
  email: 'user@example.com',
  password: 'secure_password'
})

// Sign in
const { data, error } = await supabase.auth.signInWithPassword({
  email: 'user@example.com',
  password: 'secure_password'
})

// Get current user
const { data: { user } } = await supabase.auth.getUser()
```

### Use Case 2: CRUD Operations with RLS (Frontend)
```typescript
// Query events (RLS enforces visibility)
const { data: events } = await supabase
  .from('events')
  .select(`
    *,
    venues (name, city),
    organizer:profiles!organizer_id (full_name)
  `)
  .eq('status', 'published')

// Create order (RLS validates user owns this)
const { data: order } = await supabase
  .from('orders')
  .insert({
    customer_id: user.id,
    event_id: 'e1111111-1111-1111-1111-111111111111',
    quantity: 2
  })
  .select()
  .single()
```

### Use Case 3: Admin Operations (Backend API)
```typescript
// backend/api/admin.ts
import { createClient } from '@supabase/supabase-js'

const supabaseAdmin = createClient(
  process.env.VITE_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!, // Bypasses RLS
  { auth: { persistSession: false } }
)

// Get all orders (admin view)
export async function getAllOrders() {
  const { data } = await supabaseAdmin
    .from('orders')
    .select('*, customers:profiles(*), events(*)')
    
  return data
}

// Manually update tickets_sold (bypassing trigger)
export async function adjustTicketCount(eventId: string, count: number) {
  const { data } = await supabaseAdmin
    .from('events')
    .update({ tickets_sold: count })
    .eq('id', eventId)
    
  return data
}
```

### Use Case 4: Database Migrations (CLI)
```bash
# Set personal access token
export SUPABASE_ACCESS_TOKEN="sbp_xxxxx"

# Link project
npx supabase link --project-ref asrzdtpyrdgyggqdfwwl

# Create migration
npx supabase db diff -f add_event_tags

# Apply to production
npx supabase db push

# Reset local database
npx supabase db reset
```

### Use Case 5: Serverless Function (Vercel/Netlify)
```typescript
// api/get-events.ts
import postgres from 'postgres'

export default async function handler(req, res) {
  // ‚ö†Ô∏è CRITICAL: Use transaction pooler + disable prepared statements
  const sql = postgres(process.env.SUPABASE_DB_URL_TRANSACTION!, {
    prepare: false // Required for transaction pooler
  })
  
  try {
    const events = await sql`
      SELECT e.*, v.name as venue_name
      FROM events e
      LEFT JOIN venues v ON e.venue_id = v.id
      WHERE e.status = 'published'
      ORDER BY e.start_at
      LIMIT 10
    `
    
    res.json({ events })
  } finally {
    await sql.end()
  }
}
```

## üß™ Testing Connections

### Test Frontend Connection
```typescript
// src/test-connection.ts
import { supabase } from '@/integrations/supabase/client'

async function testConnection() {
  try {
    // Test database access
    const { data, error } = await supabase
      .from('events')
      .select('count')
      .single()
    
    console.log('‚úÖ Supabase connected:', data)
    
    // Test auth
    const { data: { user } } = await supabase.auth.getUser()
    console.log('Current user:', user?.email || 'Not authenticated')
    
  } catch (error) {
    console.error('‚ùå Connection failed:', error)
  }
}
```

### Test Backend Connection
```bash
# Test direct connection
psql "$SUPABASE_DB_URL_DIRECT" -c "SELECT version();"

# Test session pooler
psql "$SUPABASE_DB_URL_SESSION" -c "SELECT current_database();"

# Test transaction pooler
psql "$SUPABASE_DB_URL_TRANSACTION" -c "SELECT 1;"
```

## üìä Environment Variables Summary

### Frontend (.env.local)
```bash
VITE_SUPABASE_URL=http://127.0.0.1:54321
VITE_SUPABASE_ANON_KEY=<from_supabase_status>
```

### Backend (.env)
```bash
VITE_SUPABASE_URL=https://PROJECT-REF.supabase.co
SUPABASE_SERVICE_ROLE_KEY=<from_dashboard_api_settings>
SUPABASE_DB_URL_SESSION=postgresql://postgres.PROJECT-REF:PASSWORD@aws-0-REGION.pooler.supabase.com:5432/postgres
```

### Serverless (.env)
```bash
VITE_SUPABASE_URL=https://PROJECT-REF.supabase.co
SUPABASE_SERVICE_ROLE_KEY=<from_dashboard>
SUPABASE_DB_URL_TRANSACTION=postgresql://postgres.PROJECT-REF:PASSWORD@aws-0-REGION.pooler.supabase.com:6543/postgres
```

### CI/CD (.env.production)
```bash
SUPABASE_ACCESS_TOKEN=<personal_access_token>
VITE_SUPABASE_URL=https://PROJECT-REF.supabase.co
SUPABASE_DB_URL_DIRECT=postgresql://postgres:PASSWORD@db.PROJECT-REF.supabase.co:5432/postgres
```

## üîó References

- [Official Connection Guide](https://supabase.com/docs/guides/database/connecting-to-postgres)
- [Connection Management](https://supabase.com/docs/guides/database/connection-management)
- Project Connection Guide: `supabase/docs/connection.md`
- Test Results: `supabase/docs/TEST-RESULTS.md`
- Quick Start: `QUICKSTART.md`

## ‚ö° Quick Rules

1. **Frontend** ‚Üí Always use Supabase Client with `ANON_KEY`
2. **Backend API** ‚Üí Session Pooler with `SERVICE_ROLE_KEY`
3. **Serverless** ‚Üí Transaction Pooler with `prepare: false`
4. **Migrations** ‚Üí Direct Connection or CLI commands
5. **Never** ‚Üí Expose service role key or personal token in frontend
6. **Always** ‚Üí Test RLS policies before deploying
7. **Security** ‚Üí Use environment variables, never hardcode keys