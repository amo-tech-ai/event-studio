---
description: Comprehensive guidelines for database seeding and sample data management in Supabase
globs: "**/*.sql, **/seed*.sql, **/sample*.sql, supabase/seed.sql, supabase/seeds/**/*.sql"
alwaysApply: true
---

# Supabase Sample Data & Seeding Guidelines

## 🎯 **Core Purpose**
Create comprehensive, realistic sample data for EventOS development, testing, and demonstration purposes using Supabase seeding best practices.

## 📊 **Seeding Strategy Overview**

### **When to Use Seed Data:**
- **Development:** Provide realistic test data for local development
- **Testing:** Ensure consistent test environments with known data sets
- **Demonstration:** Show off features with compelling sample content
- **Onboarding:** Help new developers understand data relationships

### **EventOS Seed Data Categories:**
1. **User Profiles** - Organizers, attendees, speakers, vendors
2. **Events** - Various event types with realistic details
3. **Venues** - Physical and virtual venues with full details
4. **Tickets & Orders** - Different pricing tiers and purchase scenarios
5. **Attendees** - Registration data with check-in status
6. **Marketing Content** - Sample campaigns and templates
7. **Analytics Data** - Event performance metrics

## 🏗️ **Seeding Architecture**

### **Single File Approach (Default):**
```sql
-- supabase/seed.sql
-- Main seed file for all sample data
INSERT INTO profiles (id, first_name, last_name, email, role) VALUES
  ('11111111-1111-1111-1111-111111111111', 'John', 'Organizer', 'organizer@eventos.com', 'organizer'),
  ('22222222-2222-2222-2222-222222222222', 'Jane', 'Attendee', 'attendee@example.com', 'attendee');
```

### **Multi-File Approach (Recommended for Large Projects):**
```toml
# supabase/config.toml
[db.seed]
enabled = true
sql_paths = [
  './seeds/01-users.sql',
  './seeds/02-events.sql', 
  './seeds/03-venues.sql',
  './seeds/04-tickets.sql',
  './seeds/05-orders.sql'
]
```

## 📋 **Seed Data Best Practices**

### **✅ DO:**
- **Use realistic data:** Names, emails, addresses that look authentic
- **Include variety:** Different event types, user roles, pricing tiers
- **Respect relationships:** Maintain proper foreign key relationships
- **Use UUIDs:** Generate proper UUIDs for all primary keys
- **Include edge cases:** Test scenarios like sold-out events, refunds
- **Add timestamps:** Use realistic created_at/updated_at dates
- **Test RLS policies:** Ensure sample data works with Row Level Security

### **❌ DON'T:**
- **Include sensitive data:** No real passwords, API keys, or PII
- **Use sequential IDs:** Avoid predictable patterns that could cause conflicts
- **Ignore constraints:** Respect all database constraints and checks
- **Mix schema and data:** Keep DDL (CREATE TABLE) separate from DML (INSERT)
- **Hardcode dependencies:** Use variables or functions for dynamic data

## 🎭 **EventOS Sample Data Templates**

### **1. User Profiles Seed:**
```sql
-- Realistic organizer profiles
INSERT INTO profiles (id, first_name, last_name, email, role, avatar_url, bio) VALUES
  ('11111111-1111-1111-1111-111111111111', 'Sarah', 'Johnson', 'sarah@techconf.com', 'organizer', 
   'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150', 
   'Event marketing specialist with 8 years experience organizing tech conferences'),
  ('22222222-2222-2222-2222-222222222222', 'Michael', 'Chen', 'mike@startupweekend.org', 'organizer',
   'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150',
   'Startup ecosystem builder and serial entrepreneur');

-- Diverse attendee profiles  
INSERT INTO profiles (id, first_name, last_name, email, role, job_title, company) VALUES
  ('33333333-3333-3333-3333-333333333333', 'Emily', 'Rodriguez', 'emily.r@techcorp.com', 'attendee',
   'Senior Developer', 'TechCorp Inc.'),
  ('44444444-4444-4444-4444-444444444444', 'David', 'Kim', 'david.kim@freelance.dev', 'attendee',
   'Freelance Designer', 'Independent');
```

### **2. Events Seed:**
```sql
-- Variety of event types with realistic details
INSERT INTO events (id, title, slug, description, event_type, start_date, end_date, 
                   venue_id, capacity, is_paid, currency, status, visibility) VALUES
  ('e1111111-1111-1111-1111-111111111111', 
   'Tech Conference 2024', 'tech-conference-2024',
   'Join industry leaders for the biggest tech conference of the year. Featuring AI, blockchain, and cloud computing sessions.',
   'conference', 
   '2024-06-15 09:00:00+00', '2024-06-17 18:00:00+00',
   'v1111111-1111-1111-1111-111111111111',
   500, true, 'USD', 'published', 'public'),
   
  ('e2222222-2222-2222-2222-222222222222',
   'Startup Pitch Night', 'startup-pitch-night',
   'Watch 10 innovative startups pitch their ideas to investors and win funding.',
   'networking',
   '2024-07-20 18:30:00+00', '2024-07-20 21:30:00+00', 
   'v2222222-2222-2222-2222-222222222222',
   150, true, 'USD', 'published', 'public');
```

### **3. Venues Seed:**
```sql
-- Mix of physical and virtual venues
INSERT INTO venues (id, name, address, city, state, country, postal_code, capacity, 
                   contact_email, venue_type, amenities) VALUES
  ('v1111111-1111-1111-1111-111111111111',
   'Convention Center Downtown', '123 Main St', 'San Francisco', 'CA', 'USA', '94105',
   1000, 'events@conventioncenter.com', 'physical',
   '{"parking": true, "catering": true, "av_equipment": true, "wifi": true}'::jsonb),
   
  ('v2222222-2222-2222-2222-222222222222',
   'Virtual Event Space', null, null, null, null, null,
   500, 'support@virtualspace.com', 'virtual',
   '{"recording": true, "breakout_rooms": true, "polls": true, "chat": true}'::jsonb);
```

### **4. Ticket Tiers Seed:**
```sql
-- Realistic pricing tiers for different events
INSERT INTO ticket_tiers (id, event_id, name, slug, description, price, currency, 
                         quantity_available, quantity_sold, sale_starts_at, sale_ends_at, status) VALUES
  ('t1111111-1111-1111-1111-111111111111', 'e1111111-1111-1111-1111-111111111111',
   'Early Bird', 'early-bird', 'Limited time early bird pricing', 99.00, 'USD',
   100, 45, '2024-01-01 00:00:00+00', '2024-03-31 23:59:59+00', 'active'),
   
  ('t2222222-2222-2222-2222-222222222222', 'e1111111-1111-1111-1111-111111111111', 
   'Regular', 'regular', 'Standard conference pass', 149.00, 'USD',
   300, 127, '2024-04-01 00:00:00+00', '2024-06-14 23:59:59+00', 'active');
```

## 🔄 **Seeding Workflow**

### **Development Workflow:**
```bash
# 1. Start local Supabase (runs seed.sql automatically)
supabase start

# 2. Reset database with fresh seed data
supabase db reset

# 3. Verify seed data in Studio
open http://127.0.0.1:54323
```

### **Testing Workflow:**
```bash
# 1. Run tests with seeded data
npm test

# 2. Reset for clean test state
supabase db reset

# 3. Run specific test scenarios
npm run test:integration
```

## 🛠️ **Advanced Seeding Techniques**

### **Using Snaplet for Realistic Data:**
```bash
# Install Snaplet
npm init -y
npx @snaplet/seed init

# Configure for EventOS
# seed.config.ts
export default defineConfig({
  adapter: async () => {
    const client = new Client({
      connectionString: 'postgresql://postgres:postgres@localhost:54322/postgres',
    })
    await client.connect()
    return new SeedPg(client)
  },
  select: ['!*', 'public.*'], // Only public schema
})

# Generate realistic data
npx tsx seed.ts > supabase/seed.sql
```

### **AI-Enhanced Seed Data:**
```bash
# Set up AI for realistic content generation
export OPENAI_API_KEY="your_key_here"

# Generate enhanced seed data
npx @snaplet/seed sync
npx tsx seed.ts > supabase/seed.sql
```

## 📊 **Sample Data Metrics**

### **Recommended Data Volumes:**
- **Users:** 50-100 profiles (mix of organizers, attendees, speakers)
- **Events:** 10-20 events (various types, statuses, dates)
- **Venues:** 15-25 venues (physical and virtual)
- **Tickets:** 30-50 ticket tiers across all events
- **Orders:** 200-500 orders (realistic purchase patterns)
- **Attendees:** 300-800 registrations

### **Data Relationships:**
- Each event should have 2-5 ticket tiers
- 60-80% of tickets should be sold (realistic conversion)
- Mix of paid and free events (70/30 ratio)
- Various event statuses: draft, published, completed, cancelled
- Realistic date ranges: past, present, and future events

## 🎯 **EventOS-Specific Seed Scenarios**

### **1. Complete Event Lifecycle:**
- Draft event → Published → Ticket sales → Sold out → Completed
- Include check-in data, attendance metrics, post-event feedback

### **2. Multi-Tenant Scenarios:**
- Multiple organizers with different event portfolios
- Cross-tenant data isolation testing
- Role-based access scenarios

### **3. Edge Cases:**
- Cancelled events with refunds
- Sold-out events with waitlists
- Free events with high attendance
- Events with multiple ticket tiers

### **4. Analytics Data:**
- Event view counts, conversion rates
- Revenue tracking across different events
- Attendee engagement metrics
- Marketing campaign performance

## 🚀 **Production Considerations**

### **Seed Data vs Production Data:**
- **Development:** Use comprehensive seed data for testing
- **Staging:** Use anonymized production data subsets
- **Production:** Never use seed data - only real user data

### **Data Privacy:**
- No real personal information in seed data
- Use realistic but fictional names, emails, addresses
- Avoid any data that could identify real people
- Include data anonymization for staging environments

## 📝 **File Organization**

```
supabase/
├── seed.sql                 # Main seed file (default)
├── seeds/                   # Multi-file approach
│   ├── 01-users.sql        # User profiles and auth data
│   ├── 02-events.sql       # Event definitions
│   ├── 03-venues.sql       # Venue information
│   ├── 04-tickets.sql      # Ticket tiers and pricing
│   ├── 05-orders.sql       # Purchase transactions
│   ├── 06-attendees.sql    # Registration data
│   └── 07-analytics.sql    # Performance metrics
└── config.toml             # Seed configuration
```

This rule ensures comprehensive, realistic sample data that supports EventOS development, testing, and demonstration while following Supabase best practices.
