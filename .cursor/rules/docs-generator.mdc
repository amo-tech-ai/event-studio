---
description: MVP Documentation Generator for EventOS
alwaysApply: true
---

# EventOS MVP Documentation Generator

## ðŸŽ¯ **Purpose**
Generate comprehensive, numbered documentation sets (001-009) for EventOS MVP projects using the docs-architect persona.

## ðŸ“‹ **Documentation Structure**

### **Core MVP Documentation Set**
| No. | Document Name | Purpose |
|-----|---------------|---------|
| **001-overview.md** | Executive summary of MVP, goals, and architecture vision |
| **002-architecture.md** | System boundaries, major components, flow diagrams |
| **003-setup-guide.md** | Environment setup, Supabase, CLI, dependencies |
| **004-core-features.md** | Core MVP features, logic, and code explanations |
| **005-intermediate-workflows.md** | Automations, Supabase triggers, data flow |
| **006-advanced-features.md** | AI agents, Claude skills, Playwright/Chrome MCP |
| **007-best-practices.md** | Naming, folder structure, RLS, safety, consistency |
| **008-success-criteria.md** | Functional, performance, and reliability goals |
| **009-workflow-checklist.md** | Task steps, testing order, progress tracking |

## ðŸ§© **Generation Guidelines**

### **Each Document Must Include:**
1. **Purpose Summary** â€“ what the doc covers and why it matters
2. **Key Steps / Features** â€“ numbered for clarity
3. **Real-World Example** â€“ short practical example or command
4. **Flow Diagram (Mermaid)** â€“ show sequence or data flow
5. **Implementation Tips** â€“ from best practices or common pitfalls
6. **Success Validation** â€“ how to confirm completion or correctness

### **Document Standards:**
- **Format:** Markdown with consistent headers
- **Length:** â‰¤ 2 pages for MVP phase clarity
- **Language:** Simple, instructional, developer-friendly
- **Structure:** Clear hierarchy with ##, ### levels
- **Content:** Tables, bullet lists, diagrams, code examples

## ðŸš€ **Usage Instructions**

### **Generate Complete MVP Documentation:**
```
Generate EventOS MVP documentation set (001-009):
Create comprehensive documentation following the docs-architect structure,
including all required sections, examples, diagrams, and validation steps.
Output to docs/mvp/ directory with proper cross-references.
```

### **Generate Individual Documents:**
```
Generate [document-number] for EventOS MVP:
Create [document-name] following the docs-architect guidelines,
including purpose summary, key steps, real-world examples,
flow diagrams, implementation tips, and success validation.
```

## ðŸ“Š **Quality Standards**

### **Success Criteria:**
- âœ… All 9 documents generated with proper structure
- âœ… Cross-references between documents working
- âœ… Mermaid diagrams rendering correctly
- âœ… Code examples functional and tested
- âœ… Implementation tips actionable
- âœ… Success validation steps measurable

### **Validation Commands:**
```bash
# Check documentation structure
ls docs/mvp/ | grep -E "00[1-9]-.*\.md$"

# Validate markdown syntax
npm run lint:docs

# Test code examples
npm run test:docs-examples

# Generate documentation report
npm run docs:report
```

## ðŸŽ¯ **Integration with EventOS**

### **Documentation Features:**
- **Supabase Integration** - Database schemas, RLS policies, triggers
- **Claude Skills** - AI agent configurations and workflows
- **MCP Servers** - Playwright, Chrome DevTools, Task Master integration
- **React Patterns** - Component architecture, hooks, state management
- **Testing Strategies** - Unit, integration, E2E testing approaches

### **Cross-References:**
- Documents reference each other with `[filename](filename.md)` links
- Code examples reference actual project files
- Diagrams show real system architecture
- Validation steps use actual project commands

---

**Generated:** 2025-01-17  
**Version:** MVP 1.0  
**Status:** Documentation Generator Complete
