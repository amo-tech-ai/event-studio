EventOS AI Event Creation Wizard - MVP Product Requirements Document

==============================================
OBJECTIVE
==============================================

Build an AI-powered 6-stage event creation wizard that enables corporate event planners to create professional events in under 3 minutes using conversational AI and automated workflows.

Primary Goal: Reduce event creation time from 3 weeks (industry standard) to 3 minutes
Success Metric: 95% wizard completion rate with zero data loss

==============================================
CONTEXT
==============================================

Current State:
- Foundation complete: Database schema (11 tables), authentication, RLS policies (34 total)
- Wizard UI components built: WizardLayout, FormCard, RadioCard, TagSelector, WizardStepper
- Validation framework implemented with Zod schemas
- Lovable Cloud deployment infrastructure ready
- Auto-save functionality designed but not implemented

Technology Stack:
- Frontend: React 18.3 + TypeScript 5.8 + Vite
- UI: Tailwind CSS + shadcn/ui components
- Backend: Supabase PostgreSQL 15 with Row-Level Security
- AI: Lovable AI Gateway (Gemini 2.5 Flash)
- Payments: Stripe Connect
- State: Zustand + React Query

Market Context:
- Canadian corporate event market: $2.1B annually
- Average event budget: $30,000 - $200,000
- Current planning timeline: 3-6 weeks manual process
- Target: 150+ corporate clients in Year 1

==============================================
SCOPE - MVP FEATURES ONLY
==============================================

IN SCOPE (Core MVP):

1. Six-Stage Event Creation Wizard
   - Stage 1: Event Basics (type, name, date, attendees, description)
   - Stage 2: Event Details (format, accessibility, branding)
   - Stage 3: Venue Selection (search, filter, capacity matching)
   - Stage 4: Ticketing (tiers, pricing, limits, tax calculations)
   - Stage 5: Event Marketing (description, social links, SEO)
   - Stage 6: Review & Publish (validation, terms, publish)

2. Auto-Save System
   - Save every 30 seconds
   - Save on stage navigation
   - Save on field blur
   - Session resume capability
   - Visual save indicators

3. Form Validation
   - Real-time field validation
   - Stage-level validation
   - Cross-stage dependency validation
   - Clear error messaging
   - Accessibility compliance

4. Event Management
   - Create event records
   - Update event details
   - Publish/unpublish events
   - Event status tracking
   - Basic event listing

5. Database Operations
   - Create wizard_sessions table
   - Store draft event data
   - Handle session state
   - Auto-cleanup old sessions
   - Audit logging

OUT OF SCOPE (Future):
- AI content generation (descriptions, recommendations)
- Advanced venue search with availability API
- CRM integration
- WhatsApp notifications
- Analytics dashboard
- Multi-language support
- Mobile native apps
- Virtual/hybrid event features

==============================================
REQUIREMENTS
==============================================

FUNCTIONAL REQUIREMENTS:

FR1: Stage 1 - Event Basics
- Event type selection (6 types: conference, gala, product launch, team building, networking, workshop)
- Event name input (5-100 characters)
- Date and time picker (future dates only)
- Expected attendee count (10-10,000)
- Event description textarea (50-500 characters)
- Cover image upload (max 5MB, jpg/png/webp)
- Validation: All fields required, date must be future, attendee count positive

FR2: Stage 2 - Event Details
- Detailed description (500-2000 characters)
- Event format radio buttons (in-person, virtual, hybrid)
- Accessibility requirements checklist
- Special requirements textarea
- Branding color picker
- Logo upload (max 2MB)
- Validation: Required fields enforced, format selected

FR3: Stage 3 - Venue Selection
- Venue search input with debouncing
- Filter by capacity, location, amenities
- Venue cards with images and details
- Multi-select for multi-space events
- Real-time capacity validation
- Validation: Selected venue capacity >= attendee count

FR4: Stage 4 - Ticketing
- Add/remove ticket tiers dynamically
- Ticket name, price, quantity inputs
- Early bird toggle with date picker
- Group discount configuration
- Canadian tax calculation (GST/PST/HST)
- Pricing preview
- Validation: Price > 0, quantity > 0, dates valid

FR5: Stage 5 - Event Marketing
- Marketing description (SEO optimized)
- Social media links (Twitter, LinkedIn, Facebook)
- Meta title (max 60 chars)
- Meta description (max 160 chars)
- Promotional image upload
- Validation: Valid URLs, character limits

FR6: Stage 6 - Review & Publish
- Summary of all stages
- Edit buttons for each section
- Terms and conditions checkbox
- Final validation across all stages
- Publish button with confirmation
- Success page with event URL

FR7: Auto-Save System
- Zustand store for wizard state
- Debounced save function (30 second intervals)
- Save on navigation between stages
- Save on blur for text inputs
- Visual indicator (saving/saved/error)
- Session ID generation and tracking
- Resume from saved session on return

FR8: Form Validation
- Zod schemas for each stage
- Real-time validation on blur
- Error messages below fields
- Stage validation before navigation
- Cross-stage validation (e.g., venue capacity vs attendees)
- Accessibility: aria-invalid, aria-describedby
- Clear, actionable error messages

TECHNICAL REQUIREMENTS:

TR1: Database Schema
- Create wizard_sessions table:
  - id (UUID, primary key)
  - user_id (UUID, foreign key to profiles)
  - event_id (UUID, nullable, foreign key to events)
  - stage (INTEGER, 1-6)
  - status (TEXT: in_progress, completed, abandoned)
  - state (JSONB, stores all form data)
  - started_at (TIMESTAMPTZ)
  - last_saved_at (TIMESTAMPTZ)
  - completed_at (TIMESTAMPTZ)
- Create indexes on user_id, status, last_saved_at
- RLS policy: users can only access own sessions

TR2: API Endpoints (Supabase Edge Functions)
- POST /wizard/sessions - Create new session
- PATCH /wizard/sessions/:id - Update session state
- GET /wizard/sessions/:id - Get session data
- POST /wizard/sessions/:id/complete - Finalize and create event
- DELETE /wizard/sessions/:id - Delete session (optional)

TR3: Performance Requirements
- Page load time: <800ms
- Auto-save latency: <200ms
- Stage navigation: <100ms
- Form validation: <50ms
- Database queries: <100ms
- Support 100+ concurrent wizard users

TR4: Security Requirements
- Row-Level Security on wizard_sessions
- Input sanitization for all text fields
- XSS prevention
- CSRF protection
- Rate limiting: 60 saves per minute per user
- Session timeout: 24 hours

TR5: Accessibility Requirements
- WCAG 2.1 Level AA compliance
- Keyboard navigation for all stages
- Screen reader support with ARIA labels
- Focus management on stage transitions
- Error announcements
- High contrast mode support
- Touch targets min 44x44px

==============================================
CONSTRAINTS
==============================================

TECHNICAL CONSTRAINTS:
- Must use existing Lovable Cloud infrastructure
- Must integrate with existing database schema
- Must maintain existing RLS policies
- Must use existing UI components (shadcn/ui)
- Must work on mobile (responsive design)
- No external API dependencies beyond Supabase
- Browser support: Chrome, Firefox, Safari, Edge (last 2 versions)

TIME CONSTRAINTS:
- Development timeline: 2 weeks maximum
- Week 1: Complete all 6 wizard pages + validation
- Week 2: Auto-save + testing + polish
- No scope creep beyond MVP features
- Daily deployments to staging

RESOURCE CONSTRAINTS:
- Single developer implementation
- No dedicated QA team (developer testing only)
- No external API costs (use Lovable AI free tier)
- Must reuse existing components where possible
- Budget: $0 for external services

QUALITY CONSTRAINTS:
- Zero data loss requirement (auto-save must be bulletproof)
- 95% wizard completion rate target
- <5% error rate
- Mobile performance: <1 second load time
- Test coverage: 80% for critical paths

==============================================
REASONING
==============================================

DESIGN DECISIONS:

1. Why 6 Stages Instead of Single Page?
   - Progressive disclosure reduces cognitive load
   - Easier validation per section
   - Better mobile experience
   - Natural save points for auto-save
   - Allows future AI assistance per stage

2. Why Auto-Save Every 30 Seconds?
   - Balance between data safety and API costs
   - Prevents loss on browser crash
   - Less aggressive than every keystroke
   - Allows batching of changes
   - User can see save status

3. Why Zustand Over Context API?
   - Better performance for frequent updates
   - Easier debugging with dev tools
   - Less boilerplate than Redux
   - Works seamlessly with React Query
   - Smaller bundle size

4. Why Zod for Validation?
   - Type-safe validation schemas
   - Reusable across frontend and backend
   - Better TypeScript inference
   - Composable validation rules
   - Great error messages

5. Why Not Implement AI in MVP?
   - Reduces complexity for first release
   - Wizard must work independently
   - AI can be added incrementally
   - Focus on core UX first
   - Validates demand before AI investment

TRADE-OFFS:

Auto-Save vs Real-Time Sync:
- Chose auto-save with debouncing over real-time
- Pro: Reduces API calls, better performance
- Con: 30-second window for data loss
- Mitigation: Save on navigation and blur

Client-Side Validation Only:
- Chose not to duplicate validation on backend for MVP
- Pro: Faster feedback, simpler implementation
- Con: Less secure, client can bypass
- Mitigation: Add server-side validation in Phase 2

Existing Components vs Custom Build:
- Chose to reuse existing WizardLayout components
- Pro: Faster development, consistent design
- Con: Less flexibility, potential refactoring
- Mitigation: Components designed for reusability

==============================================
SUCCESS METRICS
==============================================

PRIMARY METRICS:

1. Wizard Completion Rate
   - Target: >95%
   - Measurement: (Completed sessions / Started sessions) * 100
   - Failure threshold: <85%

2. Average Creation Time
   - Target: <3 minutes
   - Measurement: completed_at - started_at for completed sessions
   - Failure threshold: >5 minutes

3. Data Loss Rate
   - Target: 0%
   - Measurement: Sessions with null state after save attempt
   - Failure threshold: >0.1%

4. Error Rate
   - Target: <5%
   - Measurement: Sessions with error state / total sessions
   - Failure threshold: >10%

SECONDARY METRICS:

5. Mobile Usage
   - Target: >60%
   - Measurement: Sessions from mobile devices / total sessions

6. Stage Abandonment
   - Target: <2% per stage
   - Measurement: Sessions abandoned at each stage

7. Auto-Save Success Rate
   - Target: >99%
   - Measurement: Successful saves / total save attempts

8. Average Saves Per Session
   - Target: 12-20 saves (2-3 per stage)
   - Measurement: Count of save operations per session

VALIDATION CRITERIA:

- All 6 stages navigable without errors
- Auto-save triggers every 30 seconds
- All validation rules enforce correctly
- Events publish successfully to database
- Mobile responsive on iPhone/Android
- Keyboard navigation functional
- Screen reader compatible
- No console errors in production

==============================================
IMPLEMENTATION PLAN
==============================================

PHASE 1: Database & State Management (Days 1-2)

Day 1:
- Create wizard_sessions table with migration
- Add RLS policies for wizard_sessions
- Set up Zustand store for wizard state
- Create session initialization logic
- Test session CRUD operations

Day 2:
- Implement auto-save hook
- Add debouncing for save operations
- Create save status indicators
- Test auto-save reliability
- Add error handling for save failures

PHASE 2: Wizard Pages (Days 3-7)

Day 3: Stage 1 - Event Basics
- Build form with existing components
- Add Zod validation schema
- Integrate with Zustand store
- Test field validation
- Add mobile responsive adjustments

Day 4: Stage 2 - Event Details
- Build detailed form
- Add accessibility checklist component
- Implement color picker
- Add logo upload
- Test validation

Day 5: Stage 3 - Venue Selection
- Build venue search interface
- Add filter components
- Implement venue cards
- Add capacity validation
- Test multi-select

Day 6: Stage 4 - Ticketing
- Build dynamic ticket tier form
- Add pricing inputs
- Implement tax calculations
- Add early bird toggle
- Test pricing logic

Day 7: Stage 5 - Event Marketing
- Build marketing form
- Add SEO field validation
- Implement social links
- Add promotional image upload
- Test character limits

PHASE 3: Review & Integration (Days 8-10)

Day 8: Stage 6 - Review & Publish
- Build summary view
- Add edit navigation
- Implement final validation
- Create publish logic
- Test event creation

Day 9: Integration Testing
- Test full wizard flow
- Verify auto-save across stages
- Test session resume
- Verify data integrity
- Fix critical bugs

Day 10: Polish & Optimization
- Add loading states
- Improve error messages
- Optimize performance
- Test on mobile devices
- Final QA pass

TESTING STRATEGY:

Unit Tests:
- Zod validation schemas
- Auto-save hook logic
- State management functions
- Utility functions

Integration Tests:
- Full wizard flow
- Auto-save functionality
- Session resume
- Event creation
- Error scenarios

Manual Testing:
- Mobile responsiveness
- Keyboard navigation
- Screen reader compatibility
- Browser compatibility
- Performance testing

==============================================
DEPENDENCIES
==============================================

INTERNAL DEPENDENCIES:
- Existing profiles table and authentication
- Existing events table schema
- Existing venues table
- Existing tickets table
- RLS policies on all tables
- shadcn/ui component library
- Wizard layout components

EXTERNAL DEPENDENCIES:
- Supabase PostgreSQL (Lovable Cloud)
- Lovable AI Gateway (future use)
- Stripe Connect (payment processing, not in MVP)
- Browser APIs: localStorage, fetch

TECHNICAL DEPENDENCIES:
- Node.js 18+
- React 18.3+
- TypeScript 5.8+
- Vite 5.0+
- Zustand 4.5+
- React Query 5.0+
- Zod 3.22+
- React Hook Form 7.50+

==============================================
RISKS & MITIGATION
==============================================

HIGH RISK:

Risk 1: Data Loss During Auto-Save
- Impact: Critical (user loses work)
- Probability: Medium
- Mitigation:
  - Implement retry logic for failed saves
  - Add localStorage backup
  - Show clear save status
  - Test extensively
  - Monitor save success rate

Risk 2: Performance Issues on Mobile
- Impact: High (affects 60% of users)
- Probability: Medium
- Mitigation:
  - Lazy load wizard stages
  - Optimize bundle size
  - Use React.memo for expensive components
  - Test on real devices
  - Monitor Core Web Vitals

MEDIUM RISK:

Risk 3: Validation Edge Cases
- Impact: Medium (users get stuck)
- Probability: High
- Mitigation:
  - Comprehensive validation testing
  - Clear error messages
  - Allow override for admins
  - User feedback collection
  - Quick bug fix process

Risk 4: Session Timeout Issues
- Impact: Medium (user frustration)
- Probability: Low
- Mitigation:
  - Set 24-hour timeout
  - Warn before timeout
  - Auto-refresh session
  - Allow session recovery
  - Clear timeout messaging

LOW RISK:

Risk 5: Browser Compatibility
- Impact: Low (affects <5% users)
- Probability: Low
- Mitigation:
  - Target last 2 versions
  - Use babel transpilation
  - Test on major browsers
  - Graceful degradation
  - Show compatibility warnings

==============================================
GLOSSARY
==============================================

- Auto-Save: Automatic persistence of wizard state to database
- Stage: One of six wizard steps
- Session: Unique wizard instance with saved state
- Draft: Incomplete event stored in wizard_sessions
- RLS: Row-Level Security (database access control)
- Debouncing: Delaying function execution until pause in events
- WCAG: Web Content Accessibility Guidelines
- XSS: Cross-Site Scripting attack
- CSRF: Cross-Site Request Forgery attack

==============================================
END OF PRD
==============================================

Version: 1.0
Date: October 13, 2025
Status: Ready for Implementation
Author: EventOS Development Team
