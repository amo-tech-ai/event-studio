# Task ID: 9
# Title: Stage 6 - Review and Publish System
# Status: pending
# Dependencies: 8
# Priority: high
# Description: Build final review stage with comprehensive summary, edit navigation, final validation, terms acceptance, and event publishing functionality.
# Details:
Create Stage6.tsx with summary sections for all previous stages, edit buttons linking back to specific stages, terms and conditions checkbox, final cross-stage validation, publish button with confirmation modal, success page with event URL. Implement event creation logic that transfers wizard data to events table. Add loading states and error handling. Code: const Stage6 = () => { const { wizardState, publishEvent } = useWizardStore(); const handlePublish = async () => { const isValid = await validateAllStages(); if (isValid && termsAccepted) { const event = await publishEvent(wizardState); router.push(`/events/${event.id}/success`); } }; return (<div><ReviewSummary data={wizardState} onEdit={navigateToStage} /><Checkbox {...register('termsAccepted')} required /><Button onClick={handlePublish} loading={isPublishing}>Publish Event</Button></div>); };

# Test Strategy:
Test summary display for all stages, verify edit navigation functionality, test final validation across all stages, validate terms checkbox requirement, test event publishing process, verify success page navigation, test error handling for publish failures.

# Subtasks:
## 1. Create Stage6 Review Summary Component [pending]
### Dependencies: None
### Description: Build comprehensive review summary component that displays all wizard data from previous stages in organized sections
### Details:
Create ReviewSummary.tsx component that takes wizardState as props and renders organized sections for: Event Basics (type, name, date, attendees), Event Details (description, format, accessibility), Venue/Virtual (location or platform details), Ticketing (all tiers with pricing), and Schedule (agenda items). Include edit buttons for each section that call onEdit callback with stage number. Use existing UI components like Card, Badge, and Button for consistent styling.

## 2. Implement Cross-Stage Validation System [pending]
### Dependencies: 9.1
### Description: Create comprehensive validation function that validates all wizard stages and returns detailed error information
### Details:
Create validateAllStages() function in wizardStore that runs validation schemas for all 6 stages. Return validation results with stage-specific errors and overall validity status. Implement validation error display in Stage6 that shows which stages have issues with specific field errors. Add navigation to problematic stages with error highlighting. Use existing Zod schemas from each stage component.

## 3. Build Terms and Conditions Acceptance UI [pending]
### Dependencies: 9.2
### Description: Create terms acceptance checkbox with modal dialog for terms content and validation requirements
### Details:
Create TermsAcceptance component with checkbox using react-hook-form register, modal dialog displaying terms and conditions content, required validation that prevents publishing without acceptance. Style with existing Checkbox and Modal components. Include links to privacy policy and terms of service. Add visual indication that terms must be accepted before publishing.

## 4. Implement Event Publishing Logic and API Integration [pending]
### Dependencies: 9.3
### Description: Create publishEvent function that transforms wizard data and creates event record in Supabase database
### Details:
Implement publishEvent() function in wizardStore that: transforms wizardState to match events table schema, handles file uploads for cover image and logos to Supabase storage, creates event record with all related data (tickets, schedule items), returns created event with ID. Add error handling for network issues, validation failures, and database constraints. Include loading states and progress indicators during publishing process.

## 5. Create Success Page and Confirmation Modal [pending]
### Dependencies: 9.4
### Description: Build publish confirmation modal and success page with event URL and sharing options
### Details:
Create PublishConfirmationModal component with event summary and confirmation buttons. Build EventSuccessPage component that displays: event URL, sharing buttons (social media, email, copy link), next steps guidance, dashboard navigation link. Include celebration animation or visual feedback. Add error boundary for handling post-publish issues. Style with existing Modal and Button components for consistency.

