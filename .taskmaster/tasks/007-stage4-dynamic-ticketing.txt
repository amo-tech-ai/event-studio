# Task ID: 7
# Title: Stage 4 - Dynamic Ticketing System
# Status: pending
# Dependencies: 6
# Priority: medium
# Description: Build dynamic ticketing interface allowing multiple ticket tiers, pricing configuration, early bird settings, group discounts, and Canadian tax calculations.
# Details:
Create Stage4.tsx with dynamic ticket tier management (add/remove), ticket name/price/quantity inputs, early bird toggle with date picker, group discount configuration, Canadian tax calculation (GST/PST/HST based on province), pricing preview component. Use react-hook-form's useFieldArray for dynamic tiers. Implement tax calculation utility for Canadian provinces. Code: const Stage4 = () => { const { fields, append, remove } = useFieldArray({ control, name: 'ticketTiers' }); const calculateTax = (price, province) => { const rates = { ON: 0.13, BC: 0.12, AB: 0.05 }; return price * (rates[province] || 0.05); }; return (<div>{fields.map((field, index) => (<TicketTierForm key={field.id} onRemove={() => remove(index)} />))}<Button onClick={() => append(defaultTier)}>Add Tier</Button></div>); };

# Test Strategy:
Test dynamic addition/removal of ticket tiers, verify pricing calculations including taxes, test early bird date validation, validate group discount logic, test pricing preview updates, verify all ticket data saves correctly.

# Subtasks:
## 1. Create Stage4 component structure with dynamic ticket tier management [pending]
### Dependencies: None
### Description: Build the main Stage4.tsx component with useFieldArray for dynamic ticket tier management
### Details:
Create Stage4.tsx component using react-hook-form's useFieldArray to manage dynamic ticket tiers. Implement fields array, append function for adding new tiers, and remove function for deleting tiers. Set up the basic component structure with proper form integration from the wizard store.

## 2. Build TicketTierForm component with pricing inputs [pending]
### Dependencies: 7.1
### Description: Create individual ticket tier form component with name, price, quantity, and description inputs
### Details:
Develop TicketTierForm component with controlled inputs for ticket name, price (with currency formatting), quantity limits, and optional description. Include validation for required fields and numeric constraints. Add remove button for each tier with confirmation.

## 3. Implement Canadian tax calculation utility and province selector [pending]
### Dependencies: 7.2
### Description: Create tax calculation utility supporting GST/PST/HST rates for all Canadian provinces
### Details:
Build calculateTax utility function with comprehensive Canadian tax rates (ON: 13% HST, BC: 12% GST+PST, AB: 5% GST, etc.). Create province selector dropdown component. Implement real-time tax calculation display for each ticket tier and total pricing.

## 4. Add early bird pricing and group discount configuration [pending]
### Dependencies: 7.3
### Description: Implement early bird toggle with date picker and group discount settings for ticket tiers
### Details:
Add early bird pricing toggle for each ticket tier with date picker for cutoff date and discount percentage input. Implement group discount configuration with minimum quantity thresholds and discount rates. Include validation for date ranges and discount percentages.

## 5. Create pricing preview component with comprehensive calculations [pending]
### Dependencies: 7.4
### Description: Build pricing preview showing subtotals, taxes, discounts, and final totals for all ticket tiers
### Details:
Develop PricingPreview component displaying itemized breakdown: base prices, early bird discounts, group discounts, tax calculations, and final totals. Include real-time updates as users modify ticket configurations. Add export/print functionality for pricing summary.

