# Task ID: 3
# Title: Zod Validation Schemas for All Wizard Stages
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Create comprehensive Zod validation schemas for all 6 wizard stages with real-time validation, cross-stage dependency validation, and accessibility-compliant error messaging.
# Details:
Create validation schemas: stage1Schema (eventType, name 5-100 chars, date future only, attendeeCount 10-10000, description 50-500 chars, coverImage max 5MB), stage2Schema (detailedDescription 500-2000 chars, format required, accessibility array, logo max 2MB), stage3Schema (venue selection with capacity >= attendeeCount), stage4Schema (ticketTiers array with price > 0, quantity > 0, valid dates), stage5Schema (URLs validation, character limits), stage6Schema (terms checkbox, final cross-validation). Add real-time validation hook with debouncing. Error messages with aria-describedby for accessibility. Code: const stage1Schema = z.object({ eventType: z.enum(['conference', 'gala', 'product-launch', 'team-building', 'networking', 'workshop']), name: z.string().min(5).max(100), ... });

# Test Strategy:
Test each field validation rule, verify character limits enforced, test cross-stage validation (venue capacity vs attendees), validate error messages display correctly, test accessibility attributes, verify real-time validation triggers on blur.

# Subtasks:
## 1. Create Stage 1 & 2 Zod Validation Schemas [pending]
### Dependencies: None
### Description: Implement comprehensive Zod validation schemas for the first two wizard stages with proper field validation rules and error messages.
### Details:
Create stage1Schema with eventType enum validation, name string validation (5-100 chars), date validation (future only), attendeeCount number validation (10-10000), description validation (50-500 chars), and coverImage file validation (max 5MB). Create stage2Schema with detailedDescription validation (500-2000 chars), format enum validation, accessibility array validation, and logo file validation (max 2MB). Include proper error messages for each field.

## 2. Create Stage 3 & 4 Zod Validation Schemas [pending]
### Dependencies: 3.1
### Description: Implement Zod validation schemas for venue selection and ticketing stages with cross-stage dependency validation.
### Details:
Create stage3Schema with venue selection validation ensuring venue capacity >= attendeeCount from stage 1, venue address validation, and facility requirements validation. Create stage4Schema with ticketTiers array validation including price validation (> 0), quantity validation (> 0), valid date ranges, early bird settings validation, and group discount validation. Implement cross-stage validation logic.

## 3. Create Stage 5 & 6 Zod Validation Schemas [pending]
### Dependencies: 3.2
### Description: Implement final validation schemas for marketing stage and review/publish stage with comprehensive validation rules.
### Details:
Create stage5Schema with URL validation for social media links (Twitter, LinkedIn, Facebook), meta title validation (max 60 chars), meta description validation (max 160 chars), marketing description validation, and promotional image validation. Create stage6Schema with terms checkbox validation (required true), final cross-validation of all previous stages, and comprehensive event data validation before publishing.

## 4. Implement Real-time Validation Hook with Debouncing [pending]
### Dependencies: 3.3
### Description: Create a custom React hook for real-time validation with debouncing to provide immediate feedback without performance issues.
### Details:
Create useRealtimeValidation hook that accepts a Zod schema and form values, implements debouncing (300ms delay), provides real-time validation results, and manages validation state. Include error state management, loading states during validation, and integration with react-hook-form. Add proper TypeScript types and error handling for validation failures.

## 5. Implement Accessibility-Compliant Error Messaging System [pending]
### Dependencies: 3.4
### Description: Create an accessible error messaging system with proper ARIA attributes and screen reader support for all validation errors.
### Details:
Implement error message components with aria-describedby attributes linking form fields to their error messages, aria-live regions for dynamic error announcements, proper error message formatting with clear descriptions, and integration with the validation schemas. Create ErrorMessage component with proper ARIA labeling, focus management for error states, and consistent styling across all wizard stages.

